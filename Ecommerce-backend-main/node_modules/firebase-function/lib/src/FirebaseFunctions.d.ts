import type * as functions from 'firebase-functions';
import { DatabaseType } from './DatabaseType';
import { type FirebaseFunctionConstructor } from './FirebaseFunction';
import { type FunctionType } from './FunctionType';
import { type PrivateKeys } from './PrivateKeys';
import { type ValidReturnType } from './ValidReturnType';
import { type FirebaseScheduleConstructor } from './FirebaseSchedule';
export type FirebaseFunctionDescriptor<T extends FunctionType<unknown, ValidReturnType, unknown>> = () => FirebaseFunctionConstructor<T>;
export declare namespace FirebaseFunctionDescriptor {
    type Parameters<T extends FirebaseFunctionDescriptor<FunctionType<unknown, ValidReturnType, unknown>>> = T extends FirebaseFunctionDescriptor<infer U> ? FunctionType.Parameters<U> : never;
    type ReturnType<T extends FirebaseFunctionDescriptor<FunctionType<unknown, ValidReturnType, unknown>>> = T extends FirebaseFunctionDescriptor<infer U> ? FunctionType.ReturnType<U> : never;
    type FlattenParameters<T extends FirebaseFunctionDescriptor<FunctionType<unknown, ValidReturnType, unknown>>> = T extends FirebaseFunctionDescriptor<infer U> ? FunctionType.FlattenParameters<U> : never;
    function create<T extends FunctionType<unknown, ValidReturnType, unknown>>(firebaseFunctions: FirebaseFunctionConstructor<T>): FirebaseFunctionDescriptor<T>;
}
export type FirebaseFunctions = FirebaseFunctionDescriptor<FunctionType<unknown, ValidReturnType, unknown>> | [string, FirebaseScheduleConstructor] | {
    [key: string]: FirebaseFunctions;
};
export type FirebaseRunnableFunctions = (functions.HttpsFunction & functions.Runnable<unknown>) | functions.CloudFunction<unknown> | {
    [key: string]: FirebaseRunnableFunctions;
};
export declare function createFirebaseFunctions(getPrivateKeys: (databaseType: DatabaseType) => PrivateKeys, firebaseFunctions: Record<string, FirebaseFunctions>, debugFirebaseFunctions?: Record<string, FirebaseFunctions>): FirebaseRunnableFunctions;
