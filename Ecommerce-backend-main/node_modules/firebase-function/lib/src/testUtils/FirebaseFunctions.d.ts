import { type Functions } from 'firebase/functions';
import { Crypter } from '../crypter';
import { type FunctionType } from '../FunctionType';
import { type FirebaseFunctionDescriptor, type FirebaseFunctions as FirebaseFunctionsType } from '../FirebaseFunctions';
import { type ValidReturnType } from '../ValidReturnType';
import { type ExpectResult } from './Expect';
export declare class FirebaseFunctions<FFunctions extends FirebaseFunctionsType> {
    private readonly functions;
    private readonly cryptionKeys;
    private readonly callSecretKey;
    private readonly functionName?;
    constructor(functions: Functions, cryptionKeys: Crypter.Keys, callSecretKey: string, functionName?: string | undefined);
    function<Key extends (FFunctions extends Record<string, FirebaseFunctionsType> ? (keyof FFunctions & string) : never)>(key: Key): FirebaseFunctions<FFunctions extends Record<string, FirebaseFunctionsType> ? FFunctions[Key] : never>;
    call(parameters: FFunctions extends FirebaseFunctionDescriptor<FunctionType<unknown, ValidReturnType, unknown>> ? FirebaseFunctionDescriptor.FlattenParameters<FFunctions> : never): Promise<ExpectResult<FFunctions extends FirebaseFunctionDescriptor<FunctionType<unknown, ValidReturnType, unknown>> ? FirebaseFunctionDescriptor.ReturnType<FFunctions> : never>>;
}
