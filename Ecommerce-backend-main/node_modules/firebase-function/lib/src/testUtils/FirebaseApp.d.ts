import { type Crypter } from '../crypter';
import { type FirebaseOptions } from 'firebase/app';
import { FirebaseFunctions as FirebaseFunctionsTester } from './FirebaseFunctions';
import { FirebaseDatabase } from './FirebaseDatabase';
import { FirebaseAuth } from './FirebaseAuth';
import { type SchemeType } from '../database';
import { type FirebaseFunctions } from '../FirebaseFunctions';
export declare class FirebaseApp<FFunctions extends FirebaseFunctions, DatabaseScheme extends SchemeType> {
    private readonly cryptionKeys;
    private readonly callSecretKey;
    private readonly _functions;
    private readonly _database;
    private readonly _auth;
    constructor(options: FirebaseOptions, cryptionKeys: Crypter.Keys, callSecretKey: string, config?: FirebaseApp.Config);
    get functions(): FirebaseFunctionsTester<FFunctions>;
    get database(): FirebaseDatabase<DatabaseScheme>;
    get auth(): FirebaseAuth;
}
export declare namespace FirebaseApp {
    interface Config {
        name?: string;
        functionsRegion?: string;
        databaseUrl?: string;
    }
}
