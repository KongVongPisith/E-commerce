"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFirebaseFunctions = exports.FirebaseFunctionDescriptor = void 0;
const DatabaseType_1 = require("./DatabaseType");
const FirebaseFunction_1 = require("./FirebaseFunction");
const FirebaseSchedule_1 = require("./FirebaseSchedule");
var FirebaseFunctionDescriptor;
(function (FirebaseFunctionDescriptor) {
    function create(firebaseFunctions) {
        return () => firebaseFunctions;
    }
    FirebaseFunctionDescriptor.create = create;
})(FirebaseFunctionDescriptor = exports.FirebaseFunctionDescriptor || (exports.FirebaseFunctionDescriptor = {}));
function createFirebaseFunctions(getPrivateKeys, firebaseFunctions, debugFirebaseFunctions = {}) {
    return {
        debug: createFirebaseFunctionsType(debugFirebaseFunctions, getPrivateKeys, new DatabaseType_1.DatabaseType('debug')),
        ...createFirebaseFunctionsType(firebaseFunctions, getPrivateKeys, new DatabaseType_1.DatabaseType('release'))
    };
}
exports.createFirebaseFunctions = createFirebaseFunctions;
function createFirebaseFunctionsType(firebaseFunctions, getPrivateKeys, databaseType) {
    if (typeof firebaseFunctions === 'function')
        return FirebaseFunction_1.FirebaseFunction.create(firebaseFunctions(), getPrivateKeys);
    if (Array.isArray(firebaseFunctions)) {
        return FirebaseSchedule_1.FirebaseSchedule.create(firebaseFunctions[0], () => new firebaseFunctions[1](databaseType));
    }
    const firebaseRunnableFunctions = {};
    for (const entry of Object.entries(firebaseFunctions))
        firebaseRunnableFunctions[entry[0]] = createFirebaseFunctionsType(entry[1], getPrivateKeys, databaseType);
    return firebaseRunnableFunctions;
}
